#!/usr/bin/env python3
from turtle import pos

import board
import neopixel
from config import *  # pylint: disable=unused-wildcard-import
import RPi.GPIO as GPIO

amount_of_leds = 8

position = 0
encoderLeftPrevoiusState = GPIO.input(encoderLeft)
encoderRightPrevoiusState = GPIO.input(encoderRight)


def encoder_move(channel):
    encoderLeftCurrentState = GPIO.input(encoderLeft)
    encoderRightCurrentState = GPIO.input(encoderRight)

    global position
    global encoderLeftPrevoiusState
    global encoderRightPrevoiusState

    if (
        encoderLeftPrevoiusState == 1
        and encoderLeftCurrentState == 0
        and encoderRightCurrentState == 0
        and encoderRightPrevoiusState == 0
    ):
        decrease_position()

    if (
        encoderRightPrevoiusState == 1
        and encoderRightCurrentState == 0
        and encoderLeftPrevoiusState == 0
        and encoderLeftCurrentState == 0
    ):
        increase_position()

    encoderLeftPrevoiusState = encoderLeftCurrentState
    encoderRightPrevoiusState = encoderRightCurrentState


def light_LED():
    pixels = neopixel.NeoPixel(board.D18, 8, brightness=1.0 / 32, auto_write=False)

    global position

    pixels.fill((0, 0, 255))
    pixels[position] = (255, 0, 0)
    pixels.show()


def increase_position():
    global position
    if position < amount_of_leds - 1:
        position += 1


def decrease_position():
    global position
    if position > 0:
        position -= 1


def main():
    GPIO.add_event_detect(
        encoderRight, GPIO.FALLING, callback=encoder_move, bouncetime=20
    )
    GPIO.add_event_detect(
        encoderLeft, GPIO.FALLING, callback=encoder_move, bouncetime=20
    )

    while True:
        light_LED()


if __name__ == "__main__":
    main()
